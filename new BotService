using Telegram.Bot;
using Telegram.Bot.Polling;
using Telegram.Bot.Types;
using JoskiTGBot2024.Database;
using JoskiTGBot2024.Models;
using JoskiTGBot2024.Services;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System.Collections.Generic;
using Telegram.Bot.Types.ReplyMarkups;
using UserModel = JoskiTGBot2024.Models.User;

namespace JoskiTGBot2024
{
    public class BotService
    {
        private readonly TelegramBotClient _botClient;
        private readonly ApplicationDbContext _dbContext;
        private readonly ExcelService _excelService;
        public bool fileRole;

        public BotService(string token)
        {
            _botClient = new TelegramBotClient(token);
            _dbContext = new ApplicationDbContext();
            _excelService = new ExcelService();
        }

        public void Start()
        {
            var receiverOptions = new ReceiverOptions
            {
                AllowedUpdates = { } // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            };

            _botClient.StartReceiving(HandleUpdateAsync, HandleErrorAsync, receiverOptions);
            Console.WriteLine("–ë–æ—Ç –ø–æ–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.");
            Console.ReadLine();
        }

        private async Task HandleUpdateAsync(ITelegramBotClient botClient, Update update, CancellationToken cancellationToken)
        {
            if (update.Message != null)
            {
                var message = update.Message;
                var user = _dbContext.Users.FirstOrDefault(u => u.TelegramUserId == message.Chat.Id);
                var command = message.Text;
                bool answer = true;

                switch (command)
                {
                    case "/srart":
                        if (user == null)
                        {
                            await AskForRole(message.Chat.Id); // –°–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–æ–ª—å
                        }
                        else if (user.IsAdmin)
                        {
                            await _botClient.SendTextMessageAsync(message.Chat.Id, $"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.");
                            await ShowAdminMenu(message.Chat.Id);
                        }
                        else
                        {
                            await _botClient.SendTextMessageAsync(message.Chat.Id, $"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {user.Role}.");
                        }
                        break;
                    case "–£—á–∞—â–∏–π—Å—è":
                        if(user == null)
                        {
                            await RegisterUser(message.Chat.Id, command);
                        }
                        else
                        {
                            await _botClient.SendTextMessageAsync(message.Chat.Id, $"–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å —Å–µ–π—á–∞—Å");
                        }
                        break;
                    case "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å":
                        if (user == null)
                        {
                            await RegisterUser(message.Chat.Id, command);
                        }
                        else
                        {
                            await _botClient.SendTextMessageAsync(message.Chat.Id, $"–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å —Å–µ–π—á–∞—Å");
                        }
                        break;
                    case @"^[–ê-–Ø–Å]{1,2}-\d{4}$":
                        if (user != null && user.Role == "–£—á–∞—â–∏–π—Å—è" && string.IsNullOrEmpty(user.GroupName))
                        {
                            await ChangeUserGroup(message.Chat.Id, command); //–≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã —Å—Ç—É–¥–µ–Ω—Ç–∞
                        }
                        else
                        {
                            await _botClient.SendTextMessageAsync(message.Chat.Id, $"–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É —Å–µ–π—á–∞—Å");
                        }
                        break;
                    case @"^[–ê-–Ø–Å][–∞-—è—ë]+ [–ê-–Ø–Å]\.[–ê-–Ø–Å]\.$":
                        if (user.Role == "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å" && string.IsNullOrEmpty(user.GroupName))
                        {
                            await ChangeUserGroup(message.Chat.Id, command); //–≤—ã–±–æ—Ä —Ñ–∞–º–∏–ª–∏–∏ –ø—Ä–µ–ø–æ–¥–∞
                        }
                        else
                        {
                            await _botClient.SendTextMessageAsync(message.Chat.Id, $"–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –§–ò–û —Å–µ–π—á–∞—Å");
                        }
                        break;
                    case "üìö –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤":
                        if (IsAdmin(message.From.Id))
                        {
                            await _botClient.SendTextMessageAsync(message.Chat.Id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª Excel —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.");
                            fileRole = false; //–º—ã –ø–æ–ª—É—á–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
                        }
                        else
                        {
                            await _botClient.SendTextMessageAsync(message.Chat.Id, "–î–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –Ω—É–∂–Ω–æ –æ–±–ª–∞–¥–∞—Ç—å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.");
                        }
                        break;
                    case "üë®‚Äçüè´ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π":
                        if (IsAdmin(message.From.Id))
                        {
                            await _botClient.SendTextMessageAsync(message.Chat.Id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª Excel —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.");
                            fileRole = true; //–º—ã –ø–æ–ª—É—á–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–æ–≤
                        }
                        else
                        {
                            await _botClient.SendTextMessageAsync(message.Chat.Id, "–î–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –Ω—É–∂–Ω–æ –æ–±–ª–∞–¥–∞—Ç—å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.");
                        }
                        break;
                    default:
                        answer = false;
                        break;
                }

                if (message.Document != null && IsAdmin(message.From.Id))
                {
                    try
                    {
                        await ProcessAdminFile(message.Chat.Id, message.Document.FileId);
                        string successMessage = fileRole ? "–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π" : "—É—á–∞—â–∏—Ö—Å—è";
                        await _botClient.SendTextMessageAsync(message.Chat.Id, $"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {successMessage} –ø—Ä–∏–Ω—è—Ç–æ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É.");
                        answer = true;
                    }
                    catch (Exception ex)
                    {
                        await _botClient.SendTextMessageAsync(message.Chat.Id, $"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {ex.Message}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.");
                    }
                }

                if (!answer)
                {
                    await _botClient.SendTextMessageAsync(message.Chat.Id, "–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ –∫–∞–∫—É—é-—Ç–æ –±—è–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ.");
                }
            }
        }

        // –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ä–æ–ª–∏
        private async Task AskForRole(long chatId)
        {
            var roleButtons = new ReplyKeyboardMarkup(new[]
            {
                new KeyboardButton("–£—á–∞—â–∏–π—Å—è"),
                new KeyboardButton("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å")
            })
            {
                ResizeKeyboard = true,
                OneTimeKeyboard = true // –°–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
            };

            await _botClient.SendTextMessageAsync(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:", replyMarkup: roleButtons);
        }

        // –ú–µ—Ç–æ–¥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        private async Task RegisterUser(long chatId, string role)
        {
            var newUser = new UserModel { TelegramUserId = chatId, Role = role, IsAdmin = false };
            _dbContext.Users.Add(newUser);
            await _dbContext.SaveChangesAsync();

            if (role == "–£—á–∞—â–∏–π—Å—è")
            {
                await _botClient.SendTextMessageAsync(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É.");
            }
            else if (role == "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å")
            {
                await _botClient.SendTextMessageAsync(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É.");
            }
            else
            {
                await _botClient.SendTextMessageAsync(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
            }
        }

        // –ú–µ—Ç–æ–¥ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        private async Task ChangeUserGroup(long chatId, string newGroupName)
        {
            var user = _dbContext.Users.FirstOrDefault(u => u.TelegramUserId == chatId);
            if (user != null)
            {
                user.GroupName = newGroupName;
                await _dbContext.SaveChangesAsync();
                await _botClient.SendTextMessageAsync(chatId, $"–í–∞—à–∞ –≥—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞–∫ {newGroupName}.");
            }
            else
            {
                await _botClient.SendTextMessageAsync(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
            }
        }

        // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        private async Task ProcessAdminFile(long adminId, string fileId)
        {
            var file = await _botClient.GetFileAsync(fileId);
            var fileStream = new MemoryStream();
            await _botClient.DownloadFileAsync(file.FilePath, fileStream);

            var schedule = _excelService.ProcessExcelFile(fileStream);
            var scheduleService = new ScheduleService(schedule);

            if (fileRole)
            {
                var teachers = _dbContext.Users.Where(u => u.Role == "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å").ToList();

                foreach (var user in teachers)
                {
                    var scheduleMessage = scheduleService.GetScheduleForGroup(user.GroupName);
                    await _botClient.SendTextMessageAsync(user.TelegramUserId, scheduleMessage, parseMode: Telegram.Bot.Types.Enums.ParseMode.Markdown);
                }
            }
            else
            {
                var students = _dbContext.Users.Where(u => u.Role == "–£—á–∞—â–∏–π—Å—è").ToList();

                foreach (var user in students)
                {
                    var scheduleMessage = scheduleService.GetScheduleForGroup(user.GroupName);
                    await _botClient.SendTextMessageAsync(user.TelegramUserId, scheduleMessage, parseMode: Telegram.Bot.Types.Enums.ParseMode.Markdown);
                }
            }
        }

        // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        private async Task ShowAdminMenu(long chatId)
        {
            var adminButtons = new ReplyKeyboardMarkup(new[]
            {
                new KeyboardButton("üìö –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"),
                new KeyboardButton("üë®‚Äçüè´ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
            })
            {
                ResizeKeyboard = true
            };

            await _botClient.SendTextMessageAsync(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", replyMarkup: adminButtons);
        }

        private bool IsAdmin(long userId)
        {
            var user = _dbContext.Users.FirstOrDefault(u => u.TelegramUserId == userId);
            return user != null && user.IsAdmin;
        }

        private Task HandleErrorAsync(ITelegramBotClient botClient, Exception exception, CancellationToken cancellationToken)
        {
            Console.WriteLine($"–û—à–∏–±–∫–∞: {exception.Message}");
            return Task.CompletedTask;
        }
    }
}
